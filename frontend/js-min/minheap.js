function MinHeap(r){this.arr=[],this.keyFn=r}MinHeap.prototype={insert:function(r){this.arr.push(r),this.swim(this.arr.length-1)},extractMin:function(){var r=this.arr[0],i=this.arr.pop();return this.arr.length>0&&(this.arr[0]=i,this.sink(0)),r},remove:function(r){for(var i=this.arr.length,t=0;t<i;t++)if(this.arr[t]==node){var s=this.arr.pop();if(t==i-1)break;this.arr[t]=s,this.swim(t),this.sink(t);break}},size:function(){return this.arr.length},swim:function(r){var i=this.arr[r];for(this.keyFn(i);r>0;){var t=Math.floor((r+1)/2)-1,s=this.arr[t];if(score>=this.keyFn(s))break;this.arr[t]=i,this.arr[r]=s,r=t}},sink:function(r){for(var i=this.arr.length,t=this.arr[r],s=this.keyFn(t);;){var a=null;if((h=(o=2*(r+1))-1)<i){var h=this.arr[h],e=this.keyFn(h);e<s&&(a=h)}if(o<i){var o=this.arr[o];this.keyFn(o)<(null==a?s:e)&&(a=o)}if(null==a)break;this.arr[n]=this.arr[a],this.arr[a]=t,n=a}}};